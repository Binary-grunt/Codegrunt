# exercise_app.py
from file_generators.exercise_manager import ExerciseManager
from api.openai_helpers import OpenAIHelpers
from core_utils.score_manager import ScoreManager
from core_utils.path_manager import PathManager, DirectoryManager
from cli.inputs import Inputs
from config.language_options import LANGUAGES
import os


class AppCommands:
    def __init__(self):
        self.path_manager = PathManager()
        self.score_manager = ScoreManager()
        self.open_ai_api = OpenAIHelpers()
        self.cli_inputs = Inputs()
        self.exercise_manager = ExerciseManager()

    def generate_command(self, cli_inputs: Inputs):
        lang_choice = cli_inputs.get_language_choice()
        lang = LANGUAGES[lang_choice]
        subject = self.cli_inputs.get_subject()

        if lang and subject:
            # Déterminer le chemin du répertoire pour l'exercice
            full_directory_path = DirectoryManager.directory_path(
                subject, lang)

            # Générer et sauvegarder le fichier d'exercice
            file_path = self.exercise_manager.create_new_exercise(
                lang, subject, full_directory_path)
            print(f"File generated at: {file_path}")

            if file_path:
                # Définir le chemin de l'exercice actuel
                self.path_manager.set_current_exercise_path(file_path)
                print(f"Current exercise path set to: {file_path}")

                file_name = os.path.basename(file_path)
                print("______________________\n")
                print(f"Your current exercise is: {file_name}.\n")
                print("After completing it, use the 'submit' command to evaluate it.")
                print("______________________\n")
            else:
                print("Failed to generate the exercise file.")
        else:
            print("Failed to generate command due to invalid input.")

    def submit_command(self):
        file_path = self.path_manager.get_current_exercise_path()
        print("______________________\n")

        if not file_path:
            print("No current exercise to submit. Please generate an exercise first.")
            return

        try:
            if self.score_manager.has_been_evaluated(file_path):
                print(f"The file '{
                      file_path}' has already been evaluated. You cannot evaluate it again.")
                return

            # Analyser le code fourni dans le fichier
            result = self.open_ai_api.get_analyzed_code(file_path)

            # Calculer le score
            self.score_manager.score_count(result)
            self.score_manager.mark_as_evaluated(file_path)

            # Générer un nouvel exercice sur le même sujet
            subject = self.cli_inputs.subject
            self.exercise_manager.regenerate_exercise(file_path, subject)

        except FileNotFoundError:
            print(f"Error: The file '{
                  file_path}' was not found. Please check the file path and try again.")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
